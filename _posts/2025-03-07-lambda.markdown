---
layout: post
title:  "lambda表达式捕获列表"
date:   2025-03-07 23:21:34 +0800
categories: jekyll update
---
C++中的lambda表达式形式如下：
```
[capture list](paramater list) { function body }
```
其形式除了捕获列表外其他部分和普通函数一样，本文介绍捕获列表的相关内容。

捕获列表的目的是为了使用外部（lambda表达式以外）变量，捕获的方式包含值捕获，引用捕获。

### 值捕获
值捕获类似与函数传参中的值传递，会将捕获列表中涉及的变量拷贝一份，需要注意的是拷贝发生于lambda表达式定义期间，而不是使用lambda表达式的时候，如下例所示：
```
int value = 1;
auto foo = [value]() {
    return value;
}
value = 100;
std::cout << foo() << std::endl;
```
上述代码输出的是1，而不是100，value的值在定义lambda表达式时就进行了拷贝，后续再修改value，并不会修改lambda表达式内的value。

### 引用捕获
继续使用上述例子
```
int value = 1;
auto foo = [&value]() {
    return value;
}
value = 100;
std::cout << foo() << std::endl;
```
这时，将会输出100。因为内部的value只是外部的value的引用，外部变化时，foo内的value也会变化。

### 捕获右值
上文中提到的值捕获和引用捕获都是捕获在外部已经定义的对象，这些都是左值，C++14提供了捕获右值的支持，如下例所示：
```
    int value = 1;
    auto up = std::make_unique<int>(1);
    auto foo = [&value, v = std::move(up)]() {
        return value + *v;
    };

    std::cout << foo() << std::endl;
```
该例子中，up是一个不能被复制的对象，因此不能使用“=”进行捕获，可以通过std::move将其转化为右值，然后捕获。